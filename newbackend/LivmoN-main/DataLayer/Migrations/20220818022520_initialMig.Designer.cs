// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220818022520_initialMig")]
    partial class initialMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.Property<Guid>("activiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("activiteId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperienceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FoodExist")
                        .HasColumnType("bit");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HostId");

                    b.Property<string>("IsValid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LodgingExist")
                        .HasColumnType("bit");

                    b.Property<string>("MapLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("OtherCritics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PriceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spots")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TransportExist")
                        .HasColumnType("bit");

                    b.HasKey("ExperienceId");

                    b.HasIndex("HostId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.ExperienceDates", b =>
                {
                    b.Property<Guid>("ExperienceDatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperienceDatesId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("ExperienceDates");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<string>("NameDish")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Foodxperience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.Property<Guid>("FoodServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClosingHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<string>("DaysOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FoodPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpenHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodServId");

                    b.HasIndex("CommercantId");

                    b.ToTable("foodServices");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.Property<Guid>("LodgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LodgingId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("LodgingExperience");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.Property<Guid>("LodgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("LodgingAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingDescript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("LodgingId");

                    b.HasIndex("CommercantId");

                    b.ToTable("lodgingServices");
                });

            modelBuilder.Entity("DataLayer.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivitiyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExperienceIDFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodServId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodxperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LodgingExperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LodgingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TransportExperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("foodServiceFoodServId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivitiyId");

                    b.HasIndex("ExperienceIDFK");

                    b.HasIndex("FoodServId");

                    b.HasIndex("FoodxperineceId");

                    b.HasIndex("LodgingExperineceId");

                    b.HasIndex("LodgingId");

                    b.HasIndex("TransportExperineceId");

                    b.HasIndex("TransportId");

                    b.HasIndex("UserId");

                    b.HasIndex("foodServiceFoodServId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DataLayer.Models.Themes", b =>
                {
                    b.Property<string>("ThemeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.Property<Guid>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("ToGoFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToGoFromDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToGoTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToGoToArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToReturnFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToReturnFromDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToReturnTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToReturnToArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehiculeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("TransportExperience");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.Property<Guid>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<string>("Gouvernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfSeatd")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiculeRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehuculeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportId");

                    b.HasIndex("CommercantId");

                    b.ToTable("transportServices");
                });

            modelBuilder.Entity("DataLayer.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Users");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "dfef9247-6347-4c91-b666-1f1fcb1ad91f",
                            ConcurrencyStamp = "228f8501-bdd8-4b7c-b606-2d05f6dbbc0c",
                            Name = "Adminisatrateur",
                            NormalizedName = "ADMINISTRATEUR"
                        },
                        new
                        {
                            Id = "514d0ec2-57d9-460b-ad3c-c19441f8d09a",
                            ConcurrencyStamp = "1df11cb2-82c1-4bc5-86fe-76f6789b94a9",
                            Name = "Host",
                            NormalizedName = "HOST"
                        },
                        new
                        {
                            Id = "686a13ec-1486-4b56-95fa-55cfbedbb461",
                            ConcurrencyStamp = "f2bcfc10-885b-43b3-bcb8-38c87d993d31",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "5fdd0ec2-8976-4dcb-a8b6-863c20ce2e93",
                            ConcurrencyStamp = "36010bc6-3bd0-41f1-8f0e-7dcbf0f75669",
                            Name = "Commercant",
                            NormalizedName = "COMMERCANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayer.Models.Admin", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<string>("NomAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("DataLayer.Models.Client", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("Client_Telephone");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("DataLayer.Models.Hote", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<string>("CINCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delegation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemaleWorkforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gouvernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaleWorkforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCnss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersAContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RNECopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Hote");
                });

            modelBuilder.Entity("DataLayer.Models.Commercant", b =>
                {
                    b.HasBaseType("DataLayer.Models.Hote");

                    b.Property<string>("BasicActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CADTouristTraansp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantSpeciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("Activites")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.HasOne("DataLayer.Models.Hote", "Host")
                        .WithMany("Experiences")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("DataLayer.Models.ExperienceDates", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("ExperienceDates")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("FoodExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("FoodServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("LodgingExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("LodgingServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.Photo", b =>
                {
                    b.HasOne("DataLayer.Models.Activity", "Activity")
                        .WithMany("Activityphoto")
                        .HasForeignKey("ActivitiyId");

                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("Photos")
                        .HasForeignKey("ExperienceIDFK")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.FoodService", "restaurantService")
                        .WithMany("Restaurantphoto")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.FoodExperience", "FoodExperience")
                        .WithMany("Foodphoto")
                        .HasForeignKey("FoodxperineceId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.LodgingExperience", "LodgingExperience")
                        .WithMany("Lodgingphoto")
                        .HasForeignKey("LodgingExperineceId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.LodgingService", "lodgingService")
                        .WithMany("Lodgingphoto")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.TransportExperience", "TransportExperience")
                        .WithMany("Transphoto")
                        .HasForeignKey("TransportExperineceId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.TransportService", "TransportService")
                        .WithMany("Transportphoto")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("DataLayer.Models.Users", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.FoodService", "foodService")
                        .WithMany("Foodhoto")
                        .HasForeignKey("foodServiceFoodServId");

                    b.Navigation("Activity");

                    b.Navigation("AppUser");

                    b.Navigation("Experience");

                    b.Navigation("FoodExperience");

                    b.Navigation("foodService");

                    b.Navigation("LodgingExperience");

                    b.Navigation("lodgingService");

                    b.Navigation("restaurantService");

                    b.Navigation("TransportExperience");

                    b.Navigation("TransportService");
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("TransportExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("TransportServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.Navigation("Activityphoto");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.Navigation("Activites");

                    b.Navigation("ExperienceDates");

                    b.Navigation("FoodExperience");

                    b.Navigation("LodgingExperience");

                    b.Navigation("Photos");

                    b.Navigation("TransportExperience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.Navigation("Foodphoto");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.Navigation("Foodhoto");

                    b.Navigation("Restaurantphoto");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.Navigation("Lodgingphoto");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.Navigation("Lodgingphoto");
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.Navigation("Transphoto");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.Navigation("Transportphoto");
                });

            modelBuilder.Entity("DataLayer.Models.Users", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("DataLayer.Models.Hote", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("DataLayer.Models.Commercant", b =>
                {
                    b.Navigation("FoodServices");

                    b.Navigation("LodgingServices");

                    b.Navigation("TransportServices");
                });
#pragma warning restore 612, 618
        }
    }
}
